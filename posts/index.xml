<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Daily-Develog</title>
    <link>https://leerograming.github.io/posts/</link>
    <description>Recent content in Posts on Daily-Develog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 10 Jul 2020 15:20:47 +0900</lastBuildDate>
    
	<atom:link href="https://leerograming.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Driver does not support get/set network timeout for connections</title>
      <link>https://leerograming.github.io/posts/driver-does-not-support-getset-network-timeout-for-connections/</link>
      <pubDate>Fri, 10 Jul 2020 15:20:47 +0900</pubDate>
      
      <guid>https://leerograming.github.io/posts/driver-does-not-support-getset-network-timeout-for-connections/</guid>
      <description>nexacro 연동 BMT 프로젝트를 개발하다가 HikariPool-1 - Driver does not support get/set network timeout for connections.(oracle.jdbc.driver.T4CConnection.getNetworkTimeout()I) 라는 log를 발견함. Info level이라 별 문제는 없을 것 같아도 신경쓰여서 원인과 해결법을 찾아보게 되었다.
 프로젝트 환경  spring-boot 2.1.3 Oracle Database 10g 10.2.0.1 ojdbc6 11.2.0.3     원인
디버깅을 해서 해당 log가 찍히는 곳을 따라가보니 HikariCP의 PoolBase.class[출처] 내부 getAndSetNetworkTimeout()였다. 아래의 코드 5번 째 줄에 connection에서 getNetworkTimeout() 메소드를 호출하지 못해서 exception이 발생, log가 찍히는 것이었다.</description>
    </item>
    
    <item>
      <title>UsernamePasswordAuthenticationFilter</title>
      <link>https://leerograming.github.io/posts/usernamepasswordauthenticationfilter/</link>
      <pubDate>Mon, 09 Mar 2020 15:31:53 +0900</pubDate>
      
      <guid>https://leerograming.github.io/posts/usernamepasswordauthenticationfilter/</guid>
      <description>  UsernamePasswordAuthenticationFilter의 attemptAuthentication 메소드에서 authenticationManager.authenticate(authenticationToken)를 호출.(authenticationManager 구현체인 ProviderManager의 authenticate()가 호출된다)    ProviderManager의 authenticate() 에서 하나, 혹은 그 이상의 AuthenticationProvider를 호출(특별한 설정이 없다면 DaoAuthenticationProvider 호출)    DaoAuthenticationProvider retrieveUser() 메소드에서 UserDetailService의 loadUserByUsername() 호출
  retrieveUser()에서 return 받은 UserDetails 객체와 authenticationToken 값을 additionalAuthenticationChecks()에서 비교(여기서 비밀번호 검증이 이루어진다.)       </description>
    </item>
    
    <item>
      <title>@Bean &amp; @Component Annotation</title>
      <link>https://leerograming.github.io/posts/bean-component-annotation/</link>
      <pubDate>Tue, 03 Mar 2020 21:16:53 +0900</pubDate>
      
      <guid>https://leerograming.github.io/posts/bean-component-annotation/</guid>
      <description>@Bean
 개발자가 컨트롤이 불가능한 외부 라이브러리를 bean으로 등록 bean으로 등록되는 객체를 리턴해야 한다. Method level 어노테이션  @Component
 개발자가 컨트롤이 가능한 Class를 bean으로 등록 Class level 어노테이션 classpath scanning  추가) scanning을 통한 bean 등록이 궁금하면 springframwork.context.annotation의 classpathscanningcandidatecomponentprovider.scanCandidateComponents 참고하기(springboot 2.2.2 기준)
  </description>
    </item>
    
  </channel>
</rss>