<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily-Develog</title>
    <link>https://leerograming.github.io/</link>
    <description>Recent content on Daily-Develog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 09 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://leerograming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://leerograming.github.io/about/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leerograming.github.io/about/</guid>
      <description>About Me화목한 가정에서 1남 1녀 장남으로 태어난31세 3년차 front-end 개발자. 3년차가 지녀야 할 역량이 무엇인지 한참 고민중
현재 공부중 : React, spring-Security
Major Career- puzzle game app NatureCube 출시 (gamesalad)
- kh정보교육원 응용SW엔지니어 및 DB엔지니어 양성과정 이수
- TOBESOFT 입사
- 동행복권 통계화면 시스템 UI &amp; 서비스 개발
- 롯데건설 차세대 erp 시스템 UI 공통 개발
- 한국과학기술기획평가원 과제관리 시스템 POC 수행
- SKTNS 공정관리 시스템 POC 수행</description>
    </item>
    
    <item>
      <title>UsernamePasswordAuthenticationFilter</title>
      <link>https://leerograming.github.io/posts/usernamepasswordauthenticationfilter/</link>
      <pubDate>Mon, 09 Mar 2020 15:31:53 +0900</pubDate>
      
      <guid>https://leerograming.github.io/posts/usernamepasswordauthenticationfilter/</guid>
      <description>  UsernamePasswordAuthenticationFilter의 attemptAuthentication 메소드에서 authenticationManager.authenticate(authenticationToken)를 호출.(authenticationManager 구현체인 ProviderManager의 authenticate()가 호출된다)    ProviderManager의 authenticate() 에서 하나, 혹은 그 이상의 AuthenticationProvider를 호출(특별한 설정이 없다면 DaoAuthenticationProvider 호출)    DaoAuthenticationProvider retrieveUser() 메소드에서 UserDetailService의 loadUserByUsername() 호출
  retrieveUser()에서 return 받은 UserDetails 객체와 authenticationToken 값을 additionalAuthenticationChecks()에서 비교(여기서 비밀번호 검증이 이루어진다.)    </description>
    </item>
    
    <item>
      <title>@Bean &amp; @Component Annotation</title>
      <link>https://leerograming.github.io/posts/bean-component-annotation/</link>
      <pubDate>Tue, 03 Mar 2020 21:16:53 +0900</pubDate>
      
      <guid>https://leerograming.github.io/posts/bean-component-annotation/</guid>
      <description>@Bean
 개발자가 컨트롤이 불가능한 외부 라이브러리를 bean으로 등록 bean으로 등록되는 객체를 리턴해야 한다. Method level 어노테이션  @Component
 개발자가 컨트롤이 가능한 Class를 bean으로 등록 Class level 어노테이션 classpath scanning  추가) scanning을 통한 bean 등록이 궁금하면 springframwork.context.annotation의 classpathscanningcandidatecomponentprovider.scanCandidateComponents 참고하기(springboot 2.2.2 기준)</description>
    </item>
    
  </channel>
</rss>